name: "Terraform Apply"
description: "Terraform Apply Composite Action"
inputs:
  deploy:
    required: true
    description: "Desired state for the deployment. true=deploy | false=destroy"
  aws-region:
    required: true
    description: "AWS Region"
  init-outcome:
    required: true
    description: "Terraform init command outcome"
  extra-args:
    required: false
    description: "Terraform apply command extra arguments"
outputs:
  exitcode:
    description: "Terraform Apply Exit code"
    value: ${{ steps.apply.outputs.exitcode }}
runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tf-version }}
        terraform_wrapper: ${{ inputs.terraform-wrapper }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.terraform-execution-iam-role-arn }}
        aws-region: ${{ inputs.aws-region }}
        role-duration-seconds: 1200
    # - name: List dir contents # 'terraform apply' or 'terraform apply -destroy'
    #   id: list-contents
    #   working-directory: terraform
    #   shell: bash
    #   run: ls -al
    - name: Download plan.tfout
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform
        merge-multiple: true
    - name: List dir contents # 'terraform apply' or 'terraform apply -destroy'
      id: list-contents
      working-directory: terraform
      shell: bash
      run: ls -al
    # - name: Download .terraform.lock.hcl
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: terraform-lock
    #     path: terraform/.terraform.lock.hcl
    #     include-hidden-files: true

    - name: Define Terraform Apply Command # 'terraform apply' or 'terraform apply -destroy'
      id: tf_apply_command
      working-directory: terraform
      shell: bash
      run: |
        if ${{ inputs.deploy }}
        then
          echo "APPLY_COMMAND=terraform apply -auto-approve" >> $GITHUB_OUTPUT
        else
          echo "APPLY_COMMAND=terraform apply -destroy -auto-approve" >> $GITHUB_OUTPUT
        fi
    - name: Add extra arguments mask
      if: ${{ inputs.extra-args != '' }}
      shell: bash
      run: echo "::add-mask::${{ inputs.extra-args }}"
    - name: Terraform Apply
      id: apply
      working-directory: terraform
      continue-on-error: true
      shell: bash
      # run: |
      #   ${{ steps.tf_apply_command.outputs.APPLY_COMMAND }} \
      #     -var="region=${{ inputs.aws-region }}" \
      #     -no-color \
      #     -detailed-exitcode \
      #     -input=false \
      #     ${{ inputs.extra-args }} | tee apply.out
      run: |
        ${{ steps.tf_apply_command.outputs.APPLY_COMMAND }} \
          -no-color \
          -input=false
          ${{ inputs.extra-args }} | tee apply.out
    # - name: Comment Pull Request
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   with:
    #     github-token: ${{ inputs.github-token }}
    #     script: |
    #       // 1. Retrieve existing bot comments for the PR
    #       const { data: comments } = await github.rest.issues.listComments({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         issue_number: context.issue.number,
    #       })
    #       const botComment = comments.find(comment => {
    #         return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ inputs.environment }}')
    #       })

    #       // 2. Prepare format of the comment
    #       const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
    #       const run_link = '<a href="' + run_url + '">Actions</a>.'
    #       const fs = require('fs')
    #       const apply_file = fs.readFileSync('apply.out', 'utf8')
    #       const apply = apply_file.length > 65000 ? apply_file.toString().substring(0, 65000) + " ..." : apply_file
    #       const truncated_message = apply_file.length > 65000 ? "Output is too long and was truncated. You can read full Apply in " + run_link + "<br /><br />" : ""

    #       const output = `## ${{ github.workflow }} - ${{ inputs.environment }}
    #       #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ inputs.init-outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       <details><summary>Validation Output</summary>

    #       \`\`\`\n
    #       ${{ steps.validate.outputs.stdout }}
    #       \`\`\`

    #       </details>

    #       #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

    #       <details><summary>Show Apply</summary>

    #       \`\`\`\n
    #       ${apply}
    #       \`\`\`

    #       </details>
    #       ${truncated_message}

    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }} ${{ inputs.environment }}\`*`;

    #       // 3. If we have a comment, update it, otherwise create a new one
    #       if (botComment) {
    #         github.rest.issues.updateComment({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           comment_id: botComment.id,
    #           body: output
    #         })
    #       } else {
    #         github.rest.issues.createComment({
    #           issue_number: context.issue.number,
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           body: output
    #         })
    #       }
    - name: Terraform Apply Status
      if: steps.apply.outcome == 'failure'
      shell: bash
      run: exit 1